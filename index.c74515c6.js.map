{"mappings":"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","sources":["<anon>","src/index.js","src/scripts/index.js","src/scripts/numbers.js"],"sourcesContent":["document.getElementById('fileInput').addEventListener('change', $3c9ad9b11e5939bc$var$handleFile);\nconst $3c9ad9b11e5939bc$var$precisionTogglerEl = document.querySelector('.precision-toggler');\n$3c9ad9b11e5939bc$var$precisionTogglerEl.addEventListener('change', $3c9ad9b11e5939bc$var$handleChoicePrecision);\nconst $3c9ad9b11e5939bc$var$precisionChecker = {\n    highPrecision: false\n};\nfunction $3c9ad9b11e5939bc$var$handleChoicePrecision(e) {\n    const userChoice = e.target.checked ? true : false;\n    if (userChoice) $3c9ad9b11e5939bc$var$precisionChecker.highPrecision = true;\n    else $3c9ad9b11e5939bc$var$precisionChecker.highPrecision = false;\n}\nfunction $3c9ad9b11e5939bc$var$handleFile(event) {\n    document.getElementById('puzzle-info').textContent = '';\n    document.getElementById('result').textContent = '';\n    const file = event.target.files[0];\n    if (!file) {\n        alert(\"\\u0411\\u0443\\u0434\\u044C \\u043B\\u0430\\u0441\\u043A\\u0430, \\u0432\\u0438\\u0431\\u0435\\u0440\\u0456\\u0442\\u044C \\u0444\\u0430\\u0439\\u043B.\");\n        return;\n    }\n    let result = '';\n    let longestPath = [];\n    const reader = new FileReader();\n    reader.onload = async function(e) {\n        const content = e.target.result;\n        const numbers = content.split(/[\\s,]+/).filter(Boolean).filter((str)=>/^\\d+$/.test(str));\n        longestPath = await $3c9ad9b11e5939bc$var$findLongestPathWithOptimization(numbers);\n        result = $3c9ad9b11e5939bc$var$buildCombinedString(longestPath);\n        document.getElementById('result').textContent = `\\u{420}\\u{435}\\u{437}\\u{443}\\u{43B}\\u{44C}\\u{442}\\u{430}\\u{442}: ${result}`;\n    };\n    reader.readAsText(file);\n    event.target.value = '';\n}\nfunction $3c9ad9b11e5939bc$var$buildGraph(numbers) {\n    console.log(\"\\u0411\\u0443\\u0434\\u0443\\u0454\\u043C\\u043E \\u0433\\u0440\\u0430\\u0444\");\n    const graph = {};\n    numbers.forEach((num)=>{\n        const suffix = num.slice(-2);\n        if (!graph[suffix]) graph[suffix] = [];\n        numbers.forEach((candidate)=>{\n            if (candidate !== num && candidate.slice(0, 2) === suffix) graph[suffix].push(candidate);\n        });\n    });\n    return graph;\n}\nasync function $3c9ad9b11e5939bc$var$findLongestPathWithOptimization(numbers) {\n    const graph = $3c9ad9b11e5939bc$var$buildGraph(numbers);\n    let longestPath = [];\n    let calculationInterrupted = false;\n    console.log(\"\\u0413\\u0440\\u0430\\u0444 \\u0437\\u0431\\u0443\\u0434\\u043E\\u0432\\u0430\\u043D\\u0438\\u0439:\", graph);\n    const timer = setTimeout(()=>{\n        calculationInterrupted = true;\n    }, 120000);\n    // 1. Запуск 'жадібної' стратегії\n    console.log(\"\\u0417\\u0430\\u043F\\u0443\\u0441\\u043A '\\u0436\\u0430\\u0434\\u0456\\u0431\\u043D\\u043E\\u0457' \\u043E\\u043F\\u0442\\u0438\\u043C\\u0456\\u0437\\u0430\\u0446\\u0456\\u0457...\");\n    let greedyMaxPath = [];\n    for (let start of numbers){\n        if (calculationInterrupted) break;\n        const greedyPathResult = await $3c9ad9b11e5939bc$var$greedyPath({\n            start: start,\n            graph: graph,\n            calculationInterrupted: calculationInterrupted\n        });\n        if (greedyPathResult.length > greedyMaxPath.length) greedyMaxPath = greedyPathResult;\n    }\n    // 2. Виконуємо DFS лише за потреби\n    if ($3c9ad9b11e5939bc$var$precisionChecker.highPrecision) {\n        console.log(\"\\u0417\\u0430\\u043F\\u0443\\u0441\\u043A DFS \\u0434\\u043B\\u044F \\u0432\\u0438\\u0441\\u043E\\u043A\\u043E\\u0457 \\u0442\\u043E\\u0447\\u043D\\u043E\\u0441\\u0442\\u0456...\");\n        for (let start of numbers){\n            if (calculationInterrupted) break;\n            const path = await $3c9ad9b11e5939bc$var$dfs({\n                start: start,\n                graph: graph,\n                calculationInterrupted: calculationInterrupted\n            });\n            if (path.length > longestPath.length) longestPath = path;\n        }\n    }\n    clearTimeout(timer);\n    if (calculationInterrupted) {\n        document.getElementById('result').textContent = \"\\u041E\\u0431\\u0447\\u0438\\u0441\\u043B\\u0435\\u043D\\u043D\\u044F \\u0437\\u0430\\u0439\\u043D\\u044F\\u043B\\u043E \\u0437\\u0430\\u0431\\u0430\\u0433\\u0430\\u0442\\u043E \\u0447\\u0430\\u0441\\u0443. \\u0421\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435 \\u0437\\u043C\\u0435\\u043D\\u0448\\u0438\\u0442\\u0438 \\u043D\\u0430\\u0431\\u0456\\u0440 \\u0447\\u0438\\u0441\\u0435\\u043B.\";\n        return [];\n    }\n    return longestPath.length > greedyMaxPath.length ? longestPath : greedyMaxPath;\n}\nfunction $3c9ad9b11e5939bc$var$buildCombinedString(longestPath) {\n    let result = longestPath[0];\n    for(let i = 1; i < longestPath.length; i++)result += longestPath[i].slice(2);\n    return result;\n}\nfunction $3c9ad9b11e5939bc$var$filterNumbers(numbers) {\n    const prefixes = new Set(numbers.map((num)=>num.slice(0, 2)));\n    const suffixes = new Set(numbers.map((num)=>num.slice(-2)));\n    return numbers.filter((num)=>prefixes.has(num.slice(-2)) || suffixes.has(num.slice(0, 2)));\n}\nasync function $3c9ad9b11e5939bc$var$greedyPath({ start: start, calculationInterrupted: calculationInterrupted, graph: graph }) {\n    const path = [\n        start\n    ];\n    let current = start;\n    while(true){\n        if (calculationInterrupted) return [];\n        const suffix = current.slice(-2);\n        const candidates = (graph[suffix] || []).filter((next)=>!path.includes(next));\n        if (candidates.length === 0) break;\n        current = candidates[0];\n        path.push(current);\n        await new Promise((resolve)=>setTimeout(resolve));\n    }\n    return path;\n}\nasync function $3c9ad9b11e5939bc$var$dfs({ start: start, graph: graph, calculationInterrupted: calculationInterrupted }) {\n    const stack = [\n        {\n            current: start,\n            path: [\n                start\n            ]\n        }\n    ];\n    let longestPath = [];\n    const visited = new Set();\n    while(stack.length > 0){\n        if (calculationInterrupted) break;\n        const { current: current, path: path } = stack.pop();\n        if (!current) continue;\n        visited.add(current);\n        if (path.length > longestPath.length) longestPath = path;\n        const suffix = current.slice(-2);\n        const nextNumbers = graph[suffix] || [];\n        for (const next of nextNumbers)if (!path.includes(next)) stack.push({\n            current: next,\n            path: [\n                ...path,\n                next\n            ]\n        });\n        // Додаткова пауза, щоб не блокувати основний потік\n        await new Promise((resolve)=>setTimeout(resolve, 0));\n    }\n    return longestPath;\n}\n\n\n\n\n\n\n//# sourceMappingURL=index.c74515c6.js.map\n","import './scripts';\n","import './numbers';\n","document.getElementById('fileInput').addEventListener('change', handleFile);\nconst precisionTogglerEl = document.querySelector('.precision-toggler');\nprecisionTogglerEl.addEventListener('change', handleChoicePrecision);\n\nconst precisionChecker = { highPrecision: false };\n\nfunction handleChoicePrecision(e) {\n  const userChoice = e.target.checked ? true : false;\n  if (userChoice) {\n    precisionChecker.highPrecision = true;\n  } else {\n    precisionChecker.highPrecision = false;\n  }\n}\n\nfunction handleFile(event) {\n  document.getElementById('puzzle-info').textContent = '';\n  document.getElementById('result').textContent = '';\n  const file = event.target.files[0];\n  if (!file) {\n    alert('Будь ласка, виберіть файл.');\n    return;\n  }\n  let result = '';\n  let longestPath = [];\n  const reader = new FileReader();\n  reader.onload = async function (e) {\n    const content = e.target.result;\n    const numbers = content\n      .split(/[\\s,]+/)\n      .filter(Boolean)\n      .filter(str => /^\\d+$/.test(str));\n\n    longestPath = await findLongestPathWithOptimization(numbers);\n    result = buildCombinedString(longestPath);\n    document.getElementById('result').textContent = `Результат: ${result}`;\n  };\n  reader.readAsText(file);\n  event.target.value = '';\n}\n\nfunction buildGraph(numbers) {\n  console.log('Будуємо граф');\n\n  const graph = {};\n  numbers.forEach(num => {\n    const suffix = num.slice(-2);\n    if (!graph[suffix]) graph[suffix] = [];\n    numbers.forEach(candidate => {\n      if (candidate !== num && candidate.slice(0, 2) === suffix) {\n        graph[suffix].push(candidate);\n      }\n    });\n  });\n  return graph;\n}\n\nasync function findLongestPathWithOptimization(numbers) {\n  const graph = buildGraph(numbers);\n\n  let longestPath = [];\n  let calculationInterrupted = false;\n\n  console.log('Граф збудований:', graph);\n\n  const timer = setTimeout(() => {\n    calculationInterrupted = true;\n  }, 120000);\n\n  // 1. Запуск 'жадібної' стратегії\n  console.log(\"Запуск 'жадібної' оптимізації...\");\n  let greedyMaxPath = [];\n  for (let start of numbers) {\n    if (calculationInterrupted) break;\n\n    const greedyPathResult = await greedyPath({\n      start,\n      graph,\n      calculationInterrupted,\n    });\n\n    if (greedyPathResult.length > greedyMaxPath.length) {\n      greedyMaxPath = greedyPathResult;\n    }\n  }\n\n  // 2. Виконуємо DFS лише за потреби\n  if (precisionChecker.highPrecision) {\n    console.log('Запуск DFS для високої точності...');\n    for (let start of numbers) {\n      if (calculationInterrupted) break;\n\n      const path = await dfs({\n        start,\n        graph,\n        calculationInterrupted,\n      });\n\n      if (path.length > longestPath.length) {\n        longestPath = path;\n      }\n    }\n  }\n\n  clearTimeout(timer);\n\n  if (calculationInterrupted) {\n    document.getElementById('result').textContent =\n      'Обчислення зайняло забагато часу. Спробуйте зменшити набір чисел.';\n    return [];\n  }\n\n  return longestPath.length > greedyMaxPath.length\n    ? longestPath\n    : greedyMaxPath;\n}\n\nfunction buildCombinedString(longestPath) {\n  let result = longestPath[0];\n  for (let i = 1; i < longestPath.length; i++) {\n    result += longestPath[i].slice(2);\n  }\n  return result;\n}\n\nfunction filterNumbers(numbers) {\n  const prefixes = new Set(numbers.map(num => num.slice(0, 2)));\n  const suffixes = new Set(numbers.map(num => num.slice(-2)));\n  return numbers.filter(\n    num => prefixes.has(num.slice(-2)) || suffixes.has(num.slice(0, 2))\n  );\n}\n\nasync function greedyPath({ start, calculationInterrupted, graph }) {\n  const path = [start];\n  let current = start;\n  while (true) {\n    if (calculationInterrupted) return [];\n    const suffix = current.slice(-2);\n    const candidates = (graph[suffix] || []).filter(\n      next => !path.includes(next)\n    );\n    if (candidates.length === 0) break;\n    current = candidates[0];\n    path.push(current);\n    await new Promise(resolve => setTimeout(resolve));\n  }\n  return path;\n}\n\nasync function dfs({ start, graph, calculationInterrupted }) {\n  const stack = [{ current: start, path: [start] }];\n  let longestPath = [];\n  const visited = new Set();\n\n  while (stack.length > 0) {\n    if (calculationInterrupted) break;\n\n    const { current, path } = stack.pop();\n    if (!current) continue;\n    visited.add(current);\n\n    if (path.length > longestPath.length) {\n      longestPath = path;\n    }\n\n    const suffix = current.slice(-2);\n    const nextNumbers = graph[suffix] || [];\n\n    for (const next of nextNumbers) {\n      if (!path.includes(next)) {\n        stack.push({\n          current: next,\n          path: [...path, next],\n        });\n      }\n    }\n\n    // Додаткова пауза, щоб не блокувати основний потік\n    await new Promise(resolve => setTimeout(resolve, 0));\n  }\n\n  return longestPath;\n}\n"],"names":["document","getElementById","addEventListener","event","textContent","file","target","files","alert","result","reader","FileReader","onload","e","numbers","content","split","filter","Boolean","str","test","$3c9ad9b11e5939bc$var$buildCombinedString","longestPath","i","length","slice","$3c9ad9b11e5939bc$var$findLongestPathWithOptimization","readAsText","value","$3c9ad9b11e5939bc$var$precisionTogglerEl","querySelector","checked","$3c9ad9b11e5939bc$var$precisionChecker","highPrecision","graph","$3c9ad9b11e5939bc$var$buildGraph","console","log","forEach","num","suffix","candidate","push","calculationInterrupted","timer","setTimeout","greedyMaxPath","start","greedyPathResult","$3c9ad9b11e5939bc$var$greedyPath","path","$3c9ad9b11e5939bc$var$dfs","clearTimeout","current","candidates","next","includes","Promise","resolve","stack","visited","Set","pop","add"],"version":3,"file":"index.c74515c6.js.map"}